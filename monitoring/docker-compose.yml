x-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  ### ===================
  ### Open Telemetry Collector
  ### ===================
  otel:
    container_name: otel
    hostname: otel
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector.yml"]
    restart: always
    volumes:
      - ./config/otel.yml:/etc/otel-collector.yml
    ports:
      - 4317:4317 # OTLP gRPC receiver
      - 55681:55681 # OTLP HTTP receiver
    networks:
      - micro-service-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
  ### ===================
  ### Jaeger Tracing
  ### ===================
  jaeger:
    container_name: jaeger
    hostname: jaeger
    restart: always
    image: jaegertracing/all-in-one:1
    volumes:
      - ./config/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
      - ./config/jaeger.yml:/etc/jaeger/config.yml
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=${PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR:-true}
      - PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}
      - PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - 16686:16686
  ### ===================
  ### Prometheus Monitoring
  ### ===================
  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    logging: *logging
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    ports:
      - 9090:9090
    networks:
      - micro-service-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
  ### ===================
  ### Grafana Web Server
  ### ===================
  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana:latest
    restart: always
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./config/grafana/dashboard:/var/lib/grafana/dashboards
      - ./config/grafana/providers.yml:/etc/grafana/provisioning/dashboards/providers.yml
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    logging: *logging
    ports:
      - 3000:3000
    networks:
      - micro-service-network
    environment:
        GF_FEATURE_TOGGLES_ENABLE: flameGraph traceqlSearch correlations traceQLStreaming metricsSummary traceqlEditor
        GF_SERVER_HTTP_PORT: 3000
        GF_LOG_LEVEL: warn
        GF_AUTH_BASIC_ENABLED: true
        GF_AUTH_DISABLE_LOGIN_FORM: true
        GF_AUTH_ANONYMOUS_ENABLED: false
        GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE: true
        GF_AUTH_GENERIC_OAUTH_ENABLED: true
        GF_AUTH_GENERIC_OAUTH_NAME: Keycloak
        GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: true
        GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "grafana"
        GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_NAME: "email:primary"
        GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
        GF_AUTH_GENERIC_OAUTH_AUTH_URL: http://localhost:8081/realms/grafana/protocol/openid-connect/auth
        GF_AUTH_GENERIC_OAUTH_TOKEN_URL: http://keycloak:8080/realms/grafana/protocol/openid-connect/token
        GF_AUTH_GENERIC_OAUTH_API_URL: http://localhost:8081/realms/grafana/protocol/openid-connect/userinfo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
### ========================
### VOLUMES PERSISTENT DATA
### ========================
volumes:
  tempo-data:
    driver: local
### ===================================
### NETWORKS GROUP FOR ONE SAME SERVICE
### ===================================
networks:
  micro-service-network:
    external: true
